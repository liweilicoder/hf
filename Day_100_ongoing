Day1
单行注释 - 以#和空格开头的部分
多行注释 - 三个引号开头，三个引号结尾

Day2
在Python中可以使用type函数对变量的类型进行检查。
逻辑运算符有三个，分别是and、or和not
print('%.1f华氏度 = %.1f摄氏度' % (f, c))
print(f'{f:.1f}华氏度 = {c:.1f}摄氏度')
# 如果代码太长写成一行不便于阅读 可以使用\对代码进行折行
is_leap = year % 4 == 0 and year % 100 != 0 or \
          year % 400 == 0
          
Day3
Python中没有用花括号来构造代码块而是使用了缩进的方式来表示代码的层次结构，如果if条件成立的情况下需要执行多条语句，
只要保持多条语句具有相同的缩进就可以了。换句话说连续的代码如果又保持了相同的缩进那么它们属于同一个代码块，相当于是一个执行的整体。
  print('周长: %f' % (a + b + c))
    p = (a + b + c) / 2
    area = (p * (p - a) * (p - b) * (p - c)) ** 0.5
    print('面积: %f' % (area))

Day4
//左闭右开，默认从0开始
range(101)：可以用来产生0到100范围的整数，需要注意的是取不到101。
range(1, 101)：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。
range(1, 101, 2)：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。
range(100, 0, -2)：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。
  print('%d*%d=%d' % (i, j, i * j), end='\t')
   
   # 通过下面的操作将y的值赋给x, 将x的值赋给y
    x, y = y, x

Day5
数字反转：
while num > 0:
    reversed_num = reversed_num * 10 + num % 10
    num //= 10

Python 可以这样写if
if 0 < debt <= money:

Day6
Python的math模块中其实已经有一个名为factorial函数实现了阶乘运算
def roll_dice(n=2)://默认值

# 在参数名前面的*表示args是一个可变参数
def add(*args):
    total = 0
    for val in args:
        total += val
    return total
 在同一个.py文件中定义了两个同名函数，由于Python没有函数重载的概念，
 那么后面的定义会覆盖之前的定义，也就意味着两个函数同名函数实际上只有一个是存在的。

import module1 as m1
import module2 as m2

m1.foo()
m2.foo()

需要说明的是，如果我们导入的模块除了定义函数之外还中有可以执行代码，
那么Python解释器在导入这个模块时就会执行这些代码，事实上我们可能并不希望如此，
因此如果我们在模块中编写了执行代码，最好是将这些执行代码放入如下所示的条件中，
这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是"__main__"。

# __name__是Python中一个隐含的变量它代表了模块的名字
# 只有被Python解释器直接执行的模块的名字才是__main__

 (x, y) = (y, x) if x > y else (x, y)
 
 如果我们希望在foo函数中修改全局作用域中的a，代码如下所示。
 def foo():
    global a
    a = 200
    print(a)  # 200


if __name__ == '__main__':
    a = 100
    foo()
    print(a)  # 200
可以使用nonlocal关键字来指示变量来自于嵌套作用域，请大家自行试验。

def main():
    # Todo: Add your code here
    pass
if __name__ == '__main__':
    main()

Day7
# 以三个双引号或单引号开头的字符串可以折行
s3 = """
hello, 
world!
"""

在\后面还可以跟一个八进制或者十六进制数来表示字符
如果不希望字符串中的\表示转义，我们可以通过在字符串的最前面加上字母r来加以说明

我们可以使用+运算符来实现字符串的拼接，可以使用*运算符来重复一个字符串的内容，
可以使用in和not in来判断一个字符串是否包含另外一个字符串（成员运算），
我们也可以用[]和[:]运算符从字符串取出某个字符或某些字符（切片运算）

一些实用函数在源文件中///////

Python 3.6以后，格式化字符串还有更为简洁的书写方式，就是在字符串前加上字母f，我们可以使用下面的语法来简化上面的代码。
a, b = 5, 10
print(f'{a} * {b} = {a * b}')

列表遍历元素：
   # 通过for循环遍历列表元素
   for elem in list1:
        print(elem)
    # 通过enumerate函数处理列表之后再遍历可以同时获得元素索引和值
    for index, elem in enumerate(list1):
        print(index, elem)
# 可以通过反向切片操作来获得倒转后的列表的拷贝
fruits5 = fruits[::-1]
#左闭右开
 fruits2 = fruits[1:4]//输出1,2,3
 fruits4 = fruits[-3:-1]//-3.-2
   
 就是通过yield关键字将一个普通函数改造成生成器函数
 
 Python中的元组与列表类似也是一种容器数据类型，可以用一个变量（对象）来存储多个数据，不同之处在于元组的元素不能修改，
 Python中的集合跟数学上的集合是一致的，不允许有重复元素，而且可以进行交集、并集、差集等运算
